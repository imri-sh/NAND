// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, max_length;

    static int int_ascii_base;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int i;
        let max_length = maxLength;

        if(0 < max_length){
            let str = Array.new(max_length);
        }
        let length = 0;
        let int_ascii_base = 48; //The ASCII value of 0. Digits 1-9's value is (int_ascii_base+digit).

        let i = 0;
        while(i < max_length){
            let str[i] = 0;
            let i = i + 1;
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if( 0 < max_length){
           do Memory.deAlloc(str);
        }
        do Memory.deAlloc(this);
        return; 
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length-1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var boolean is_negative;
        var int val, i, d;
        var int c;

        let val = 0;
        let i = 0;

        if(str[i] = 45){ // - , number is negative
            let i = i + 1;
            let is_negative = true;
        }

        while(~(i > length)) {
            let c = str[i];
            if( ~(String.isDigit(c)) ){ //Non-digit character detected
                if(is_negative){
                    return -val;
                }
                return val;
            }
            let d = c - int_ascii_base;
            let val = (val*10) + d;
            let i = i + 1;
        }
        if(is_negative){
            return -val;
        }
        return val;
    }

    function boolean isDigit(int c){
        return ( ~(int_ascii_base > c) ) & ( ~(c > (int_ascii_base + 9) ) );
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        do clearString();
        if(val < 0){
            do appendChar(45); //Negative sign
            let val = -val;
        }
        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val){
        var int val_mod_10, last_digit, c;

        let val_mod_10 = val / 10;
        let last_digit = val - (10 * val_mod_10);
        let c = int_ascii_base + last_digit;
        if ( val < 10){
            do appendChar(c);
        }
        else {
            do setIntHelper(val/10);
            do appendChar(c);
        }
        return;
    }

    method void clearString() {
        var int i;
        let i = 0;
        while(i < length){
            let str[i] = 0;
            let i = i + 1;
        }
        let length = 0;
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    
}
