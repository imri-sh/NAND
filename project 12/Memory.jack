// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList;
    static Array ram;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let freeList = 2048;
        let freeList[0] = null;
        // Heap is on RAM 2048 to 16383:
        let freeList[1] = (16383 - 2048 + 1) - 2 + 1;
        //(16383 - 2048 + 1) - number of registers on heap. -2 for control registers. +1 because the exersize requires.

        let ram = 0;
        return;
    }


    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var Array segment_pointer, segment_size_plus_one, block, prev_pointer, segment;

        let segment_pointer = freeList; //set pointer to start of freeList
        let prev_pointer = null;

        if(freeList = 0){ //No memory left
            return -1;
        }
 
        while(~(segment_pointer=0)){ 
            let segment_size_plus_one = segment_pointer[1];

            if(segment_size_plus_one > size) { //Segment can be split to fit new segment
                let block = segment_pointer + segment_size_plus_one - size + 1;
                let segment = block - 2;
                //resize the segment we're splitting, remove if size left is 1/0:
                let segment_pointer[1] = segment_size_plus_one - size - 2;

                if(  (segment_pointer = segment)  | (segment_pointer = (segment - 1)) ){ //Block left is 0 or 1 registers, un-usable.
                    if( ~(prev_pointer = 0) ){
                        let prev_pointer[0] = segment_pointer[0];
                    } else{ //We're allocating the first segment on our freeList
                        let freeList = segment_pointer[0]; //next. Note that in case we have no memory segments left - freeList=null aka 0.
                    }
                }
                let block[-2] = null; //for good measure
                let block[-1] = size + 1; //as required
                return block;
            }
            
        
            let prev_pointer = segment_pointer;
            let segment_pointer = segment_pointer[0]; //next
        }
            return -1;
    }

        
    

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
     function void deAlloc(Array o) {
        let o[-2] = freeList; // Set segment's next to current first node
        let freeList = o-2;   // Set segment as the linked-list's first node
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
     function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int max_value, max_address, o_end;
        // Initialize:
        let max_value = o[0];
        let max_address = o;
        let o_end = o + o[-1] - 1;
        // Search for max value:
        while(o < o_end){
            if(o[0] > max_value){
                let max_value = o[0];
                let max_address = o;
            }
            let o = o + 1;
        }
        return max_value;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }
    
}
